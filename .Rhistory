knitr::opts_knit$set(root.dir = "C:/Users/josue/Box/Papers/03-testing-sums-incomplete/01-code")
blogdown:::preview_site()
stop_server()
x
stop_server()
serve_site()
stop_server()
build_site()
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, message = FALSE)
knitr::opts_knit$set(root.dir = "C:/Users/josue/Box/Papers/03-testing-sums-incomplete/01-code")
library(dplyr)
library(ggplot2)
library(BGGM)
load("coverage-data.RData")
pal <- c("#FBE697", "#F3AE6D", "#516888")
library(blogdown)
serve_site()
build_site()
stop_server()
hugo_version()
build_site(build_rmd = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, message = FALSE)
knitr::opts_knit$set(root.dir = "C:/Users/josue/Box/Papers/03-testing-sums-incomplete/01-code")
library(dplyr)
library(ggplot2)
library(BGGM)
load("coverage-data.RData")
pal <- c("#FBE697", "#F3AE6D", "#516888")
coverage_plot
load("C:/Users/josue/Box/Papers/03-testing-sums-incomplete/01-code/coverage-data.RData")
coverage_plot
coverage_data %>%
ggplot(aes(type, value)) +
geom_col(aes(fill = type))
coverage_data %>%
ggplot(aes(type, value)) +
geom_col(aes(fill = type)) +
geom_hline(yintercept = 0.9, linetype = "dashed", size = 0.5, col = "grey30") +
scale_x_discrete(labels = c("Selection", "No Selection")) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent_format())
coverage_data %>%
ggplot(aes(type, value)) +
geom_col(aes(fill = type)) +
geom_hline(yintercept = 0.9, linetype = "dashed", size = 0.5, col = "grey30") +
scale_x_discrete(labels = c("Selection", "No Selection")) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent_format()) +
scale_fill_manual(name = "", values = pal[2:3])
coverage_data %>%
ggplot(aes(type, value)) +
geom_col(aes(fill = type)) +
geom_hline(yintercept = 0.9, linetype = "dashed", size = 0.5, col = "grey30") +
scale_x_discrete(labels = c("Selection", "No Selection")) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent_format()) +
scale_fill_manual(name = "", values = pal[2:3]) +
# guides(fill = guide_legend(override.aes = list(size = 2, alpha = 1))) +
theme_classic()
coverage_plot <-
coverage_data %>%
ggplot(aes(type, value)) +
geom_col(aes(fill = type)) +
geom_hline(yintercept = 0.9, linetype = "dashed", size = 0.5, col = "grey30") +
scale_x_discrete(labels = c("Selection", "No Selection")) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent_format()) +
scale_fill_manual(name = "", values = pal[2:3]) +
# guides(fill = guide_legend(override.aes = list(size = 2, alpha = 1))) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "",
y = "Coverage",
title = "Coverage rate for 90% Credible Intervals",
caption = " * Dashed line denotes 90%")
coverage_plot
coverage_plot
rm(list = ls())
load("C:/Users/josue/Box/Papers/03-testing-sums-incomplete/01-code/coverage-data.RData")
coverage_plot <-
coverage_data %>%
ggplot(aes(type, value)) +
geom_col(aes(fill = type)) +
geom_hline(yintercept = 0.9, linetype = "dashed", size = 0.5, col = "grey30") +
scale_x_discrete(labels = c("Selection", "No Selection")) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent_format()) +
scale_fill_manual(name = "", values = pal[2:3]) +
# guides(fill = guide_legend(override.aes = list(size = 2, alpha = 1))) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "",
y = "Coverage",
title = "Coverage rate for 90% Credible Intervals",
caption = " * Dashed line denotes 90%")
coverage_plot
#===================
# Plot coverages
#===================
pal <- c("#FBE697", "#F3AE6D", "#516888", "#C9DACA", "#14232A", "#557780", "#1F304A", "#802729")
coverage_data <- tibble(type = c("condit", "full"),
value = c(mean(covered_condit, na.rm = TRUE), mean(covered_full)))
coverage_data
coverage_plot <-
coverage_data %>%
ggplot(aes(type, value)) +
geom_col(aes(fill = type)) +
geom_hline(yintercept = 0.9, linetype = "dashed", size = 0.5, col = "grey30") +
scale_x_discrete(labels = c("Selection", "No Selection")) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent_format()) +
scale_fill_manual(name = "", values = pal[2:3]) +
# guides(fill = guide_legend(override.aes = list(size = 2, alpha = 1))) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "",
y = "Coverage",
title = "Coverage rate for 90% Credible Intervals",
caption = " * Dashed line denotes 90%")
coverage_plot
load("C:/Users/josue/Box/Papers/03-testing-sums-incomplete/01-code/coverage-data.RData")
coverage_plot
coverage_plot <-
coverage_data %>%
ggplot(aes(type, value)) +
geom_col(aes(fill = type)) +
geom_hline(yintercept = 0.9, linetype = "dashed", size = 0.5, col = "grey30") +
scale_x_discrete(labels = c("Selection", "No Selection")) +
scale_y_continuous(limits = c(0, 1), labels = scales::percent_format()) +
scale_fill_manual(name = "", values = pal[2:3]) +
# guides(fill = guide_legend(override.aes = list(size = 2, alpha = 1))) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "",
y = "Coverage",
title = "Coverage rate for 90% Credible Intervals",
caption = " * Dashed line denotes 90%")
coverage_plot
save.image("coverage_data2.R")
save.image("C:\\Users\\josue\\Box\\Papers\\03-testing-sums-incomplete\\01-codecoverage_data2.RData)
save.image("C:\\Users\\josue\\Box\\Papers\\03-testing-sums-incomplete\\01-codecoverage_data2.RData")
?save.image
save.image(file ="C:\\Users\\josue\\Box\\Papers\\03-testing-sums-incomplete\\01-code\\coverage_data2.RData")
library(dplyr)
library(ggplot2)
library(BGGM)
load("coverage_data2.RData")
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, message = FALSE)
knitr::opts_knit$set(root.dir = "C:/Users/josue/Box/Papers/03-testing-sums-incomplete/01-code")
library(dplyr)
library(ggplot2)
library(BGGM)
load("coverage_data2.RData")
pal <- c("#FBE697", "#F3AE6D", "#516888")
coverage_plot
trunc_plot
load("C:/Users/josue/Box/Papers/03-testing-sums-incomplete/01-code/coverage_data2.RData")
#=====================
# Plot distributions
#=====================
trunc_data <-
bind_rows(
condit = mean_condit_ei %>% as_tibble,
full = mean_full_ei %>% as_tibble,
.id = "type"
)
trunc_data %>%
group_by(type) %>%
summarise(m = mean(value, na.rm = TRUE),
lb = quantile(value, 0.05, na.rm = TRUE),
ub = quantile(value, 0.95, na.rm = TRUE))
trunc_plot
trunc_plot <-
ggplot(trunc_data, aes(value)) +
geom_histogram(aes(y = ..density.., fill = type),
bins = 25,
alpha = 0.74,
col = "black",
na.rm = TRUE,
show.legend = FALSE) +
geom_vline(xintercept = true_pcors[1, 6], col = "tomato", size = 1) +
scale_fill_manual(values = pal[2:3]) +
facet_wrap(~ type, labeller = as_labeller(c("condit" = "Selection",
"full" = "No Selection"))) +
labs(x = "Estimate",
y = "Density",
title = "Sampling Distribution of Parameter Estimates") +
theme_classic()
# partial cor matrix
true_pcors <- -cov2cor(solve(S))
library(dplyr)
library(ggplot2)
library(BGGM)
# if (getwd() != "C:/Users/josue/Box/testing-sums") setwd("testing-sums")
#==========
# Set up
#==========
set.seed(24)
# number of variables
p <- 10
# number of (partial) cors
len_out <- p * (p - 1) / 2
# values for cors
sample_space <- seq(0.1, 0.4, by = 0.001)
rhos <- sample(sample_space, size = len_out, replace = TRUE)
# covariance matrix
S <- matrix(1, p, p)
S[lower.tri(S)] <- rhos
S[upper.tri(S)] <- t(S)[upper.tri(S)]
# partial cor matrix
true_pcors <- -cov2cor(solve(S))
trunc_plot <-
ggplot(trunc_data, aes(value)) +
geom_histogram(aes(y = ..density.., fill = type),
bins = 25,
alpha = 0.74,
col = "black",
na.rm = TRUE,
show.legend = FALSE) +
geom_vline(xintercept = true_pcors[1, 6], col = "tomato", size = 1) +
scale_fill_manual(values = pal[2:3]) +
facet_wrap(~ type, labeller = as_labeller(c("condit" = "Selection",
"full" = "No Selection"))) +
labs(x = "Estimate",
y = "Density",
title = "Sampling Distribution of Parameter Estimates") +
theme_classic()
trunc_plot
save.image("C:\Users\josue\Box\Papers\03-testing-sums-incomplete\01-code\coverage-data2.RData")
save.image("C:\\Users\\josue\\Box\\Papers\\03-testing-sums-incomplete\\01-code\\coverage-data2.RData")
build_site(build_rmd = T)
library(dplyr)
library(ggplot2)
library(BGGM)
load("coverage_data2.RData")
pal <- c("#FBE697", "#F3AE6D", "#516888")
coverage_plot
trunc_plot
library(dplyr)
library(ggplot2)
library(BGGM)
load("coverage-data2.RData")
pal <- c("#FBE697", "#F3AE6D", "#516888")
trunc_plot
build_site(build_rmd = T)
build_site(build_rmd = T)
build_site(build_rmd = T)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE)
knitr::opts_knit$set(root.dir = "C:/Users/josue/Box/Papers/02-formalizing-expectations/04-tutorial-blog")
source("01-plot-adj.R")
library(MASS)
library(networktools)
library(BGGM)
# column names
col_names <-
c(
# Re-experiencing
"Intrusive Thoughts",
"Nightmares",
"Flashbacks",
"Physiological/psychological reactivity",
# Avoidance
"Avoidance of thoughts",
"Avoidance of situations",
"Amnesia",
"Disinterest in activities",
"Feeling detached",
"Emotional numbing",
"Foreshortened future",
# Arousal
"Sleep problems",
"Irritability",
"Concentration problems",
"Hypervigilance",
"Startle response"
)
# node names
node_names <- c(
paste0("B", 1:4), # re-experienceing
paste0("C", 1:7), # avoidance
paste0("D", 1:5) # arousal
)
# community names
comms <- c(
rep("Re-Experiencing", 4),
rep("Avoidance", 7),
rep("Arousal", 5)
)
# color palette
pal <- ggthemes::few_pal()(3)
node_cols <- c(
"Re-Experiencing" = pal[1],
"Avoidance" = pal[2],
"Arousal" = pal[3])
set.seed(1812)
# data for exploratory analyses
explore_ptsd <- mvrnorm(n = 965,
mu = rep(0, 16),
Sigma = ptsd_cor4,
empirical = TRUE)
colnames(explore_ptsd) <- node_names
# sample posterior distribution
explore_network <- explore(explore_ptsd,
type = "continuous",
iter = 5000)
# determine edge set
selected_network <- select(explore_network,
alternative = "exhaustive",
bf_cut = 3)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE)
knitr::opts_knit$set(root.dir = "C:/Users/josue/Box/Papers/02-formalizing-expectations/04-tutorial-blog")
source("01-plot-adj.R")
library(MASS)
library(networktools)
library(BGGM)
# column names
col_names <-
c(
# Re-experiencing
"Intrusive Thoughts",
"Nightmares",
"Flashbacks",
"Physiological/psychological reactivity",
# Avoidance
"Avoidance of thoughts",
"Avoidance of situations",
"Amnesia",
"Disinterest in activities",
"Feeling detached",
"Emotional numbing",
"Foreshortened future",
# Arousal
"Sleep problems",
"Irritability",
"Concentration problems",
"Hypervigilance",
"Startle response"
)
# node names
node_names <- c(
paste0("B", 1:4), # re-experienceing
paste0("C", 1:7), # avoidance
paste0("D", 1:5) # arousal
)
# community names
comms <- c(
rep("Re-Experiencing", 4),
rep("Avoidance", 7),
rep("Arousal", 5)
)
# color palette
pal <- ggthemes::few_pal()(3)
node_cols <- c(
"Re-Experiencing" = pal[1],
"Avoidance" = pal[2],
"Arousal" = pal[3])
set.seed(1812)
# data for exploratory analyses
explore_ptsd <- mvrnorm(n = 965,
mu = rep(0, 16),
Sigma = ptsd_cor4,
empirical = TRUE)
colnames(explore_ptsd) <- node_names
# sample posterior distribution
explore_network <- explore(explore_ptsd,
type = "continuous",
iter = 5000)
# determine edge set
selected_network <- select(explore_network,
alternative = "exhaustive",
bf_cut = 3)
# retain positive partial correlations from selected network
partial_cors <- selected_network$pcor_mat * selected_network$pos_mat
# rename columns with node names
dimnames(partial_cors) <- list(node_names, node_names)
# calculate bridge strength. comms is a vector specifying
# the community for each node
bridge_strengths <- bridge(partial_cors, communities = comms)$`Bridge Strength`
# we use the top 10% in bridge strength as bridge nodes
bridge_strength_cutoff <- quantile(bridge_strengths, 0.9)
bridge_strengths[bridge_strengths > bridge_strength_cutoff]
coord_d1 <-
data.frame(
x = c(1, 0, 1, 2, 3, 4, 3),
y = c(1, 2, 3, 2, 1, 2, 3),
comm = c("3",  "3",  "3",  "1",  "2",  "2",  "2"),
node = c("B1", "B4", "B2", "D1", "C6", "C1", "C2")
)
plot_d1 <-
ggplot(coord_d1, aes(x, y)) +
# bridge cors
annotate(geom = "segment",
x = rep(2, 4),
xend = c(1, 1, 3, 3),
y = rep(2, 4),
yend = c(1, 3, 1, 3),
linetype = "dashed",
size = 1) +
# independent
annotate(geom = "segment",
x = c(2, 2),
xend = c(0, 4),
y = c(2, 2),
yend = c(2, 2),
linetype = "dotted",
col = "gray70") +
# B nodes
annotate(geom = "segment",
x = c(1, 1, 0),
xend = c(0, 1, 1),
y = c(1, 1, 2),
yend = c(2, 3, 3),
linetype = c(3, 1, 1),
col = "gray70") +
# C nodes
annotate(geom = "segment",
x = c(3, 3, 4),
xend = c(4, 3, 3),
y = c(1, 1, 2),
yend = c(2, 3, 3),
linetype = c(1, 3, 3),
col = "gray70") +
# bridge cor labels
annotate(geom = "label",
label = c(0.11, 0.31, 0.08, 0.15),
x = c(1.5, 1.5, 2.5, 2.5),
y = c(1.5, 2.5, 1.5, 2.5)) +
geom_point(size = 21) +
geom_point(aes(fill = comm),
size = 20,
shape = 21,
show.legend = FALSE) +
geom_text(aes(label = node)) +
lims(x = c(-0.1, 4.1), y = c(0.9, 3.1))  +
ggthemes::scale_fill_few() +
theme_facet()
coord_b4 <-
data.frame(
x = coord_d1$x,
y = coord_d1$y,
comm = c("2", "2", "2", "3", "1", "1", "1"),
node = c("C7", "C6", "C1", "B4", "D4", "D1", "D3")
)
plot_b4 <-
ggplot(coord_b4, aes(x, y)) +
# bridge cors
annotate(geom = "segment",
x = rep(2, 4),
xend = c(1, 1, 3, 3),
y = rep(2, 4),
yend = c(1, 3, 1, 3),
size = 1) +
# independent
annotate(geom = "segment",
x = c(2, 2),
xend = c(0, 4),
y = c(2, 2),
yend = c(2, 2),
linetype = "dotted",
col = "gray70") +
# C nodes
annotate(geom = "segment",
x = c(1, 1, 0),
xend = c(0, 1, 1),
y = c(1, 1, 2),
yend = c(2, 3, 3),
linetype = c(3, 3, 1),
col = "gray70") +
# D nodes
annotate(geom = "segment",
x = c(3, 3, 4),
xend = c(4, 3, 3),
y = c(1, 1, 2),
yend = c(2, 3, 3),
linetype = c(1, 1, 3),
col = "gray70") +
# bridge cor labels
annotate(geom = "label",
label = c(0.11, 0.21, 0.07, 0.14),
x = c(1.5, 1.5, 2.5, 2.5),
y = c(1.5, 2.5, 1.5, 2.5)) +
geom_point(size = 21) +
geom_point(aes(fill = comm),
size = 20,
shape = 21,
show.legend = FALSE) +
geom_text(aes(label = node)) +
lims(x = c(-0.1, 4.1), y = c(0.9, 3.1))  +
ggthemes::scale_fill_few() +
theme_facet()
plot_d1
plot_b4
set.seed(1)
confirm_ptsd <- mvrnorm(n = 926,
mu = rep(0, 16),
Sigma = ptsd_cor3,
empirical = TRUE)
colnames(confirm_ptsd) <- node_names
hyp_var_rep <- c("(B4--C1, B4--C7, B4--D3, B4--D4) > 0;
B4--C1 > (B4--C7, B4--D3, B4--D4) > 0")
confirm_var_rep <- confirm(confirm_ptsd,
hyp_var_rep,
iter = 50000)
confirm_var_rep
library(blogdown)
build_site(build_rmd = TRUE)
build_site(build_rmd = TRUE)
build_site(build_rmd = TRUE)
serve_site()
stop_server()
rm(list = ls())
library(blogdown)
serve_site()
stop_server()
build_site()
source('~/.active-rstudio-document', echo=TRUE)
blogdown::serve_site()
blogdown::stop_server()
